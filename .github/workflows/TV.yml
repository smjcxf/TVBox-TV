name: TV

on:
  push:
  schedule:
    - cron: "15,45 0-18,22-23 * * *"
  workflow_dispatch:
    inputs:
      rebuild:
        description: "忽略构建记录以重新构建"
        required: false
        type: boolean
      donotpublish:
        description: "构建后不提交发布新版"
        required: false
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - userName: smjcxf
            repoName: TV
            branchName: fongmi
          - userName: smjcxf
            repoName: TV
            branchName: release

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check New Commit
        id: check-commit
        run: |
          upstream="https://github.com/${{ matrix.userName }}/${{ matrix.repoName }}"
          commit=$(curl -sL "$upstream/commits/${{ matrix.branchName }}" | grep -o "/${{ matrix.userName }}/${{ matrix.repoName }}/commit/[a-z0-9]\+" | head -1 | cut -d/ -f5 || curl -s "https://api.github.com/repos/${{ matrix.userName }}/${{ matrix.repoName }}/commits/${{ matrix.branchName }}?per_page=1" | jq -r '.sha')
          if ! grep -q "$commit" README.md || [ "${{ inputs.rebuild }}" == "true" ]; then
            echo "commit=$commit" >> $GITHUB_ENV
            echo "commitS=${commit:0:7}" >> $GITHUB_ENV
            echo "upstream=$upstream" >> $GITHUB_ENV
          fi
          echo "Commit checked: $commit"

      - name: Setup Environment
        if: env.commit
        run: |
          git clone --depth 1 https://github.com/androidx/media.git TVBox-TV
          cd TVBox-TV
          git clone --depth 1 --branch ${{ matrix.branchName }} ${{ env.upstream }} media
          cd media
          git checkout ${{ env.commit }}
          export TZ='Asia/Shanghai'
          echo "tag=$(git log --date=format:'%Y%m%d-%H%M' --pretty=format:%cd ${{ env.commitS }} -1)" >> $GITHUB_ENV

      - name: Cache Gradle Dependencies
        if: env.commit
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: gradle-${{ runner.os }}-

      - name: Modify Build Files
        if: env.commit
        working-directory: TVBox-TV/media
        run: |
          # 修改 VersionName
          if [ "${{ matrix.userName }}" == "smjcxf" ]; then
            sed -i 's/\.concat(buildTime())/ +\"${{ env.tag }}\"/g' app/build.gradle
          else
            sed -i "/versionName/s#[0-9a-zA-Z_\.\'\"-]\+\$#\'${{ env.tag }}\'#" app/build.gradle
            sed -i "/android:text=/s#=\"#=\"${{ env.tag }}\\\\n\\\\n#" app/src/main/res/layout/dialog_about.xml
          fi
          # 添加 crosswalk 源
          if grep -q 'crosswalk' build.gradle; then
            sed -i "/crosswalk/a\        maven { url 'https://o0HalfLife0o.github.io/crosswalk/releases/crosswalk/android/maven2' }" build.gradle
          else
            sed -i "/jitpack.io/a\        maven { url 'https://o0HalfLife0o.github.io/crosswalk/releases/crosswalk/android/maven2' }" build.gradle
          fi

      - name: Compress Source Code
        if: env.commit
        working-directory: TVBox-TV/media
        run: |
          rm -rf release
          zip -q -x ".git/*" -x ".github/*" -r "source-${{ env.commitS }}.zip" .

      - name: Setup JDK 17
        if: env.commit
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Build APK with Gradle
        if: env.commit
        working-directory: TVBox-TV/media
        run: |
          chmod +x ./gradlew
          rm -rf app/src/armeabi_v7a/assets app/src/arm64_v8a/assets
          ./gradlew assemblerelease --build-cache --parallel --daemon --warning-mode all

      - name: Prepare APK
        if: env.commit
        working-directory: TVBox-TV/media
        run: |
          rm -rf apk && mkdir -p apk
          find ~ \( -name "*python*.apk" -o -name "*java*.apk" \) -not -name "*x86*" -exec cp {} apk/ \;
          mv "source-${{ env.commitS }}.zip" apk/

      - name: Generate Release Note
        if: env.commit
        working-directory: TVBox-TV/media
        run: |
          lastCommit=$(grep "${{ matrix.userName }}\/${{ matrix.repoName }}\/tree\/${{ matrix.branchName }}" ${{ github.workspace }}/README.md | grep -o '[a-z0-9]\{40\}')
          echo -e "Credit: [${{ matrix.userName }}/${{ matrix.repoName }}/${{ matrix.branchName }}](${{ env.upstream }})\nCommit: ${{ env.commit }}\nChangelog:" > apk/${{ matrix.userName }}-Release.log
          if [ "${{ env.commit }}" == "$lastCommit" ]; then
            git log --pretty=format:%B ${{ env.commitS }} -1 | sed -e "s# \{2,\}#\n#g" -e "/^Merge \(pull\|branch\|remote\)/d" -e '/^$/d' | sort -u >> apk/${{ matrix.userName }}-Release.log
          else
            git log --pretty=format:%B ${{ env.commitS }}...${lastCommit:0:7} | sed -e "s# \{2,\}#\n#g" -e "/^Merge \(pull\|branch\|remote\)/d" -e '/^$/d' | sort -u >> apk/${{ matrix.userName }}-Release.log
          fi

      - name: Download Telegram Bot API Binary
        if: env.commit
        uses: actions/download-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: TVBox-TV/media

      - name: Post to Telegram
        if: env.commit && secrets.BOT_TOKEN
        working-directory: TVBox-TV/media
        env:
          CHAT_ID: -1002241320915
          TELEGRAM_TOKEN: ${{ secrets.BOT_TOKEN }}
        run: |
          sed -i -e '1s/\[\(.*\)\].*/#\1/' -e 's#\([&"\/]\)#\\\1#g' apk/${{ matrix.userName }}-Release.log
          mv -f apk/${{ matrix.userName }}-Release.log caption.txt
          chmod +x telegram-bot-api-binary
          ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 --local 2>&1 > /dev/null &
          cp ${{ github.workspace }}/.github/scripts/upload.py ./
          python upload.py

      - name: Update xytv JSON
        if: env.commit
        working-directory: TVBox-TV/media
        run: |
          git clone --depth 5 https://github.com/smjcxf/xytv.git
          sed -i "s#[0-9]\{8\}-[0-9]\{4\}#${{ env.tag }}#g" xytv/json/market.json
          cd xytv
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add json/market.json
          git remote set-url origin "https://smjcxf:${{ secrets.GITHUBXYTV_TOKEN }}@github.com/smjcxf/xytv"
          git commit -m "更新 market.json" || echo "No changes to commit"
          git push -f

      - name: Push APK to fongmi
        if: env.commit
        run: |
          git clone --depth 5 --branch fongmi "https://smjcxf:${{ secrets.GITHUB_TOKEN }}@github.com/smjcxf/TVBox-TV.git" fongmi-apk
          cd fongmi-apk
          target_dir=$([ "${{ matrix.branchName }}" == "release" ] && echo "apk/release" || echo "apk/dev")
          mkdir -p "$target_dir"
          rm -f "$target_dir"/*
          cp -v /home/runner/work/TVBox-TV/TVBox-TV/TVBox-TV/media/apk/* "$target_dir"/
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$target_dir"/
          git commit -m "更新 $target_dir APKs ${{ env.tag }}"
          git push --force

      - name: Update README
        if: env.commit
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git pull --rebase
          sed -i "/${{ matrix.userName }}\/${{ matrix.repoName }}\/tree\/${{ matrix.branchName }}/s#Updated: [a-zA-Z0-9]*#Updated: ${{ env.commit }}#" README.md
          sed -i "/${{ matrix.userName }}\/${{ matrix.repoName }}\/tree\/${{ matrix.branchName }}/s#name: [0-9\-]*#name: ${{ env.tag }}#" README.md
          git add README.md
          git commit -m "Update README with commit ${{ env.commit }}" || echo "No changes to commit"
          git push

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Telegram Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v4
        with:
          path: telegram-bot-api-binary
          key: telegram-bot-api-${{ runner.os }}-${{ hashFiles('telegram-bot-api/CMakeLists.txt') }}

      - name: Build Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update -y && sudo apt-get install -y make git zlib1g-dev libssl-dev gperf cmake g++
          git clone --recursive --depth 1 https://github.com/tdlib/telegram-bot-api.git
          cd telegram-bot-api
          mkdir build && cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=../.. ..
          cmake --build . --target install -j$(nproc)
          cp ../../bin/telegram-bot-api ../../telegram-bot-api-binary

      - name: Upload Telegram Bot API Binary
        uses: actions/upload-artifact@v4
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary